pipeline {
    agent any

    environment {
        REGISTRY_URL = "192.168.2.249:5000"
        REGISTRY_CREDENTIALS = credentials('docker-registry')
        IMAGE_NAME = "${REGISTRY_URL}/python-flask-app"
        IMAGE_TAG = "latest"
        VENV_PATH = "venv"
    }

    stages {
        stage('Fetch Code') {
            steps {
                git branch: 'main', url: 'https://github.com/mohsenkazemifar/flask-app.git'
            }
        }

        stage('Setup Python Virtualenv and Install Dependencies') {
            steps {
                dir('ci-cd-flask-app/app') {
                    // ایجاد virtualenv
                    sh '''
                        python3 -m venv ${VENV_PATH}
                        . ${VENV_PATH}/bin/activate
                        pip install --upgrade pip
                        pip install -r requirements.txt
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('ci-cd-flask-app/app') {
                    // اجرای تست‌ها در virtualenv
                    sh '''
                        . ${VENV_PATH}/bin/activate
                        pytest
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('ci-cd-flask-app/app') {
                    withSonarQubeEnv('sonar') {
                        sh '''
                        sonar-scanner \
                            -Dsonar.projectKey=flask-app \
                            -Dsonar.sources=. \
                            -Dsonar.python.coverage.reportPaths=coverage.xml
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // داکر ایمیج رو از پوشه ci-cd-flask-app میسازیم چون Dockerfile اونجا هست
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", 'ci-cd-flask-app')
                }
            }
        }

        stage('Push to Private Registry') {
            steps {
                script {
                    docker.withRegistry("https://${REGISTRY_URL}", 'docker-registry') {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh 'kubectl apply -f ci-cd-flask-app/k8s/deployment.yaml'
                sh 'kubectl apply -f ci-cd-flask-app/k8s/service.yaml'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
    }
}
